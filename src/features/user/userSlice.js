import { createSlice } from "@reduxjs/toolkit";
import { toast } from "react-toastify";

// Define available themes
const themes = {
  nord: "nord",
  dim: "dim",
};

// Function to get user from localStorage, if it exists
const getUserFromLocalStorage = () => {
  return JSON.parse(localStorage.getItem("user")) || null;
};

// Function to get theme from localStorage, if it exists, otherwise use default theme
const getThemeFromLocalStorage = () => {
  const theme = localStorage.getItem("theme") || themes.dim;
  document.documentElement.setAttribute("data-theme", theme); // Set theme attribute on the document's root element
  return theme;
};

// Initial state including user and theme fetched from localStorage
const initialState = {
  user: getUserFromLocalStorage(),
  theme: getThemeFromLocalStorage(),
};

// Create a slice of the Redux store for user-related state and actions
const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {
    // Action to log in a user
    loginUser: (state, action) => {
      const user = { ...action.payload.user, token: action.payload.jwt }; // Add token to user data
      state.user = user;
      localStorage.setItem("user", JSON.stringify(user)); // Store user in localStorage
    },
    // Action to log out a user
    logoutUser: (state) => {
      state.user = null;
      localStorage.removeItem("user"); // Remove user from localStorage
      toast.success("Logged out successfully"); // Display success message
    },
    // Action to toggle between themes
    toggleTheme: (state) => {
      const { nord, dim } = themes;
      state.theme = state.theme === dim ? nord : dim; // Switch theme
      document.documentElement.setAttribute("data-theme", state.theme); // Set theme attribute on the document's root element
      localStorage.setItem("theme", state.theme); // Store theme in localStorage
    },
  },
});

// Export actions generated by createSlice
export const { loginUser, logoutUser, toggleTheme } = userSlice.actions;

// Export reducer generated by createSlice
export default userSlice.reducer;
